components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
    role:
      type: apiKey
      name: Authorization
      in: header
paths:
  /categories/{categoryId}/shopItems:
    get:
      security:
        - bearerAuth: []
      tags:
        - ShopItems
      summary: Find shops
      description: Finds and returns an array with a list of shops.
      produces:
        - application/json
      parameters:
        - name: page
          in: query
          required: false
          description: Current page of shop items
          type: number
        - name: limit
          in: query
          required: false
          description: Limit for shop items
          type: number
        - name: title
          in: query
          required: false
          description: Title of shop items
        - name: sortBy
          in: query
          required: false
          description: Sort by some option
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/definitions/tags'
              example:
                items:
                  - _id: 643d45405bfd177ec8dfb734
                    title: apple 1
                    description: The best computer
                    photos: []
                    quantity: 1
                    authorId: 6431be3637f5afb28633a5a8
                    categoryId: 6431c23daa74967ae516fa17
                    tags: []
                    price: 400
                    totalReviews: 0
                    createdAt: 2023-04-17T13:10:24.304Z
                    updatedAt: 2023-04-17T13:10:24.304Z
                    createdBy: Mark Watney
                totalCounts: 1
# shopItemsRouter.use(/:shopItemId/reviews, reviewsRouter);
# shopItemsRouter.use(/, paymentRouter);
#
# shopItemsRouter.get(/, asyncWrapper(ShopItemController.getAll));
# shopItemsRouter.get(/:id, asyncWrapper(ShopItemController.getOne));
# shopItemsRouter.post(
#   /,
#   rightsValidation(Roles.Seller),
#   asyncWrapper(ShopItemController.create)
# );
# shopItemsRouter.patch(
#   /:id,
#   rightsValidation(Roles.Seller, Roles.Admin),
#   uploadShopItemPhotos,
#   resizeShopItemPhotos,
#   asyncWrapper(ShopItemController.updateOne)
# );
# shopItemsRouter.delete(/:id, asyncWrapper(ShopItemController.deleteOne));
#
#
